package com.scuti.spark.jobs;



import org.apache.hadoop.conf.Configuration;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.bson.BSONObject;
import org.bson.BasicBSONObject;

import scala.Tuple2;

import com.mongodb.hadoop.MongoOutputFormat;
import com.mongodb.hadoop.MongoInputFormat;

import java.util.Arrays;
import java.util.Collections;

public class JavaWordCount {

    public static void excecute(String[] args) {

        JavaSparkContext sc = new JavaSparkContext("local", "Java Word Count");

        Configuration config = new Configuration();
        config.set("mongo.input.uri", "mongodb://127.0.0.1:27017/predictive.customer");
        config.set("mongo.output.uri", "mongodb://127.0.0.1:27017/predictive.user");

        JavaPairRDD<Object, BSONObject> mongoRDD = sc.newAPIHadoopRDD(config, MongoInputFormat.class, Object.class, BSONObject.class);


// Input contains tuples of (ObjectId, BSONObject)
        JavaRDD<String> words = mongoRDD.flatMap(new FlatMapFunction<Tuple2<Object, BSONObject>, String>() {
            @Override
            public Iterable<String> call(Tuple2<Object, BSONObject> arg) {
                Object o = arg._2.get("text");
                if (o instanceof String) {
                    String str = (String) o;
                    str = str.toLowerCase().replaceAll("[.,!?\n]", " ");
                    return Arrays.asList(str.split(" "));
                } else {
                    return Collections.emptyList();
                }
            }
        });

        JavaPairRDD<String, Integer> ones = words.mapToPair(new PairFunction<String, String, Integer>() {
            public Tuple2<String, Integer> call(String s) {
                return new Tuple2<String, Integer>(s, 1);
            }
        });
        JavaPairRDD<String, Integer> counts = ones.reduceByKey(new Function2<Integer, Integer, Integer>() {
            public Integer call(Integer i1, Integer i2) {
                return i1 + i2;
            }
        });

// Output contains tuples of (null, BSONObject) â€“ ObjectId will be generated by Mongo driver if null
        JavaPairRDD<Object, BSONObject> save = counts.mapToPair(new PairFunction<Tuple2<String, Integer>, Object, BSONObject>() {
            @Override
            public Tuple2<Object, BSONObject> call(Tuple2<String, Integer> tuple) {
                BSONObject bson = new BasicBSONObject();
                bson.put("word", tuple._1);
                bson.put("count", tuple._2);
                return new Tuple2<Object, BSONObject>(null, bson);
            }
        });

// Only MongoOutputFormat and config are relevant
        save.saveAsNewAPIHadoopFile("file:///bogus", Object.class, Object.class, MongoOutputFormat.class, config);
    }

}